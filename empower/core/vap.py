#!/usr/bin/env python3
#
# Copyright (c) 2015, Roberto Riggio
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the CREATE-NET nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY CREATE-NET ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CREATE-NET BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""EmPOWER Virtual Access Point (VAP) class."""

import empower.logger
LOG = empower.logger.get_logger()


class VAP(object):
    """ The EmPOWER Virtual Access Point

    Attributes:
        net_bssid: The client's MAC Address as an EtherAddress instance.
        bssid: The LVAP's MAC Address as an EtherAddress instance. This
          address is dynamically generated by the Access Controller.
          The BSSID is supposed to be unique in the entire network.
        ssid: The currently associated SSID.
        block: the resource blocks to which this LVAP is assigned.

    """

    def __init__(self, net_bssid, block, wtp, tenant):

        # read only params
        self.net_bssid = net_bssid
        self.ssid = tenant.tenant_name
        self.block = block
        self.wtp = wtp
        self.tenant_id = tenant.tenant_id

    def to_dict(self):
        """ Return a JSON-serializable dictionary representing the LVAP """

        return {'net_bssid': self.net_bssid,
                'ssid': self.ssid,
                'block': self.block,
                'wtp': self.wtp,
                'tenant_id': self.tenant_id}

    def __str__(self):

        accum = []
        accum.append("net_bssid ")
        accum.append(str(self.net_bssid))
        accum.append(" ssid ")
        accum.append(str(self.ssid))
        accum.append(" block ")
        accum.append(str(self.block))
        accum.append(" wtp ")
        accum.append(str(self.wtp.addr))
        accum.append(" tenant_id ")
        accum.append(str(self.tenant_id))

        return ''.join(accum)

    def __hash__(self):
        return hash(self.net_bssid)

    def __eq__(self, other):
        if isinstance(other, VAP):
            return self.net_bssid == other.net_bssid
        return False

    def __ne__(self, other):
        return not self.__eq__(other)
