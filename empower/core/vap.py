#!/usr/bin/env python3
#
# Copyright (c) 2016 Roberto Riggio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.

"""EmPOWER Virtual Access Point (VAP) class."""

import empower.logger
LOG = empower.logger.get_logger()


class VAP(object):
    """ The EmPOWER Virtual Access Point

    Attributes:
        net_bssid: The client's MAC Address as an EtherAddress instance.
        bssid: The LVAP's MAC Address as an EtherAddress instance. This
          address is dynamically generated by the Access Controller.
          The BSSID is supposed to be unique in the entire network.
        ssid: The currently associated SSID.
        block: the resource blocks to which this LVAP is assigned.

    """

    def __init__(self, net_bssid, block, wtp, tenant):

        # read only params
        self.net_bssid = net_bssid
        self.block = block
        self.wtp = wtp
        self._tenant = tenant

    @property
    def ssid(self):
        """ Get the SSID assigned to this LVAP. """

        if not self._tenant:
            return None

        return self._tenant.tenant_name

    @property
    def tenant(self):
        """ Get the tenant assigned to this LVAP. """

        return self._tenant

    def to_dict(self):
        """ Return a JSON-serializable dictionary representing the LVAP """

        return {'net_bssid': self.net_bssid,
                'ssid': self.ssid,
                'block': self.block,
                'wtp': self.wtp}

    def __str__(self):

        accum = []
        accum.append("net_bssid ")
        accum.append(str(self.net_bssid))
        accum.append(" ssid ")
        accum.append(str(self.ssid))
        accum.append(" block ")
        accum.append(str(self.block))
        accum.append(" wtp ")
        accum.append(str(self.wtp.addr))

        return ''.join(accum)

    def __hash__(self):
        return hash(self.net_bssid)

    def __eq__(self, other):
        if isinstance(other, VAP):
            return self.net_bssid == other.net_bssid
        return False

    def __ne__(self, other):
        return not self.__eq__(other)
